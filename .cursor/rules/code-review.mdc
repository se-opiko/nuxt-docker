---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# コードレビューガイドライン

## 1. コードの品質チェック

### 1.1 型安全性
- [ ] TypeScriptの型定義が適切に行われているか
- [ ] 型の使用が一貫しているか
- [ ] any型の使用が最小限に抑えられているか

### 1.2 エラーハンドリング
- [ ] 適切なエラーハンドリングが実装されているか
- [ ] エラーメッセージが明確で分かりやすいか
- [ ] エラー発生時のユーザーへのフィードバックが適切か

### 1.3 パフォーマンス
- [ ] 不要な再レンダリングが発生していないか
- [ ] 適切なキャッシュ戦略が実装されているか
- [ ] 大量データ処理時の最適化が考慮されているか

## 2. アーキテクチャと設計

### 2.1 コンポーネント設計
- [ ] コンポーネントの責務が明確か
- [ ] 適切なコンポーネント分割が行われているか
- [ ] 再利用可能なコンポーネントとして設計されているか

### 2.2 状態管理
- [ ] 状態管理の方法が適切か
- [ ] 状態の更新が予測可能か
- [ ] グローバル状態とローカル状態の使い分けが適切か

### 2.3 API設計
- [ ] APIエンドポイントの命名が適切か
- [ ] レスポンス形式が一貫しているか
- [ ] エラーレスポンスの形式が統一されているか

## 3. セキュリティ

### 3.1 認証・認可
- [ ] 適切な認証・認可が実装されているか
- [ ] セッション管理が適切か
- [ ] 機密情報の取り扱いが適切か

### 3.2 入力値検証
- [ ] ユーザー入力のバリデーションが適切か
- [ ] XSS対策が実装されているか
- [ ] CSRF対策が実装されているか

## 4. テスト

### 4.1 テストカバレッジ
- [ ] 重要な機能のテストが実装されているか
- [ ] エッジケースのテストが含まれているか
- [ ] テストの実行結果が安定しているか

### 4.2 テストの品質
- [ ] テストが理解しやすいか
- [ ] テストの独立性が保たれているか
- [ ] モックの使用が適切か

## 5. ドキュメント

### 5.1 コードドキュメント
- [ ] 関数やクラスの目的が明確に記述されているか
- [ ] 複雑なロジックにコメントが付いているか
- [ ] JSDocなどの形式が統一されているか

### 5.2 プロジェクトドキュメント
- [ ] セットアップ手順が明確か
- [ ] 環境変数の説明が含まれているか
- [ ] API仕様が文書化されているか

## 6. コーディング規約

### 6.1 コードスタイル
- [ ] 命名規則が一貫しているか
- [ ] インデントが統一されているか
- [ ] 不要なコードが含まれていないか

### 6.2 ベストプラクティス
- [ ] 最新のベストプラクティスに従っているか
- [ ] フレームワークの推奨パターンを使用しているか
- [ ] パフォーマンスのベストプラクティスに従っているか

## レビューコメントのテンプレート

### 提案
```typescript
// 改善提案
const improvedCode = `
// 改善後のコード
`;
```

### 質問
```typescript
// 質問
const question = `
// 質問内容
`;
```

### 指摘
```typescript
// 指摘
const issue = `
// 指摘内容
`;
```

## レビュー時の注意点

1. 建設的なフィードバック
   - 問題点の指摘だけでなく、改善案も提示する
   - ポジティブな点も評価する

2. 明確な説明
   - なぜその変更が必要なのかを説明する
   - 具体的な例を示す

3. 一貫性のあるレビュー
   - 同じ基準でレビューを行う
   - チームの規約に従う

4. タイムリーなレビュー
   - 迅速なレビューを心がける
   - 大きな変更は早めにフィードバックする